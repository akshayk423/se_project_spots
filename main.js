!function(){"use strict";var e="";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_type_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=(e,t,r)=>{const o=e.querySelector(`#${t.id}-error`);t.classList.remove(r.inputErrorClass),o.textContent="",o.classList.add(r.errorClass)},o=(e,t,r)=>{(e=>e.some(e=>!e.validity.valid))(e)?n(t,r):s(t,r)},n=(e,t)=>{e.classList.add(t.inactiveButtonClass),e.disabled=!0},s=(e,t)=>{e.classList.remove(t.inactiveButtonClass),e.disabled=!1};var a=e+"d3610e9c6dce3cb370d8.svg",i=e+"1ecf96fab54a91c898b4.svg",c=e+"40608da7369d39bc1077.svg";const d=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}editUserInfo({name:e,about:t}){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}addCard({name:e,link:t}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE",body:JSON.stringify({cardId:e})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT",body:JSON.stringify({cardId:e})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE",body:JSON.stringify({cardId:e})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}spotsStartUp(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6e58b2db-8c6b-4765-b44f-89c77c553815","Content-Type":"application/json"}}),l=document.querySelector(".profile__name"),u=document.querySelector(".profile__description"),m=document.querySelector(".profile__avatar");document.getElementById("spots-logo").src=a,document.getElementById("edit-icon").src=i,document.getElementById("plus-icon").src=c;const _=document.querySelector(".profile__edit-profile-btn"),h=document.querySelector("#edit-profile-modal"),y=document.forms.profile,v=document.querySelector(".profile__new-post-btn"),b=document.querySelector("#new-post-modal"),f=document.forms.newPost,S=document.querySelector("#delete-card-modal"),p=document.querySelector(".modal__delete-btn"),E=document.querySelector(".modal__cancel-btn"),k=document.querySelector(".profile__avatar-edit-btn"),q=document.querySelector("#edit-avatar-modal"),C=document.forms.avatar,g=document.querySelector("#avatar-link-input"),L=document.querySelector(".profile__column"),$=L.querySelector(".profile__name"),x=L.querySelector(".profile__description"),U=h.querySelector("#profile-name-input"),j=h.querySelector("#describe-input"),P=b.querySelector("#image-link-input"),A=b.querySelector("#caption-input"),I=document.querySelector(".cards__list"),B=document.querySelector("#modal-image"),w=B.querySelector(".modal__image"),D=B.querySelector(".modal__caption"),N=document.querySelector("#card-template").content;let O,T;function J(e){"Escape"===e.key&&z(document.querySelector(".modal_is-opened"))}function H(e){e.classList.add("modal_is-opened"),document.addEventListener("keydown",J)}function z(e){e.classList.remove("modal_is-opened"),document.removeEventListener("keydown",J)}function M(e,t="prepend"){const r=function(e){const t=N.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__text"),o=t.querySelector(".card__image");o.setAttribute("src",e.link),o.setAttribute("alt",e.name),r.textContent=e.name;const n=t.querySelector(".card__like-btn");return e.isLiked&&n.classList.toggle("card__like-btn_liked"),n.addEventListener("click",t=>{var r,o;r=t.target,o=e._id,e.isLiked?d.dislikeCard(o).then(()=>r.classList.toggle("card__like-btn_liked")).catch(e=>console.error(e)):d.likeCard(o).then(()=>r.classList.toggle("card__like-btn_liked")).catch(e=>console.error(e))}),t.querySelector(".card__delete-btn").addEventListener("click",r=>{!function(e,t){O=e,T=t,H(S)}(t,e._id)}),o.addEventListener("click",()=>{w.setAttribute("src",e.link),w.setAttribute("alt",e.name),D.textContent=e.name,H(B)}),t}(e);I[t](r)}var F;document.querySelectorAll(".modal").forEach(e=>{e.addEventListener("mousedown",t=>{(t.target===e||t.target.classList.contains("modal__close-btn"))&&z(e)})}),k.addEventListener("click",()=>{H(q)}),_.addEventListener("click",function(){H(h),U.value=$.textContent,j.value=x.textContent,((e,t,n)=>{t.forEach(t=>{r(e,t,n)});const s=e.querySelector(n.submitButtonSelector);o(t,s,n)})(y,[U,j],t)}),v.addEventListener("click",function(){H(b)}),y.addEventListener("submit",e=>{e.preventDefault();const t=U.value,r=j.value,o=y.querySelector(".modal__submit");o.textContent="Saving...",o.disabled=!0,d.editUserInfo({name:t,about:r}).then(e=>{l.textContent=e.name,u.textContent=e.about}).catch(e=>console.error(e)).finally(()=>{z(h),U.value=l.textContent,j.value=u.textContent,o.textContent="Save",o.disabled=!1})}),E.addEventListener("click",()=>{z(S)}),f.addEventListener("submit",e=>{e.preventDefault();const r=A.value,o=P.value,s=f.querySelector(".modal__submit");s.textContent="Saving...",s.disabled=!0,d.addCard({name:r,link:o}).then(e=>{M(e)}).catch(e=>console.error(e)).finally(()=>{s.textContent="Save",s.disabled=!1,f.reset(),n(s,t),z(b)})}),p.addEventListener("click",function(){p.textContent="Deleting...",d.deleteCard(T).then(()=>{O.remove()}).catch(e=>console.error(e)).finally(()=>z(S))}),C.addEventListener("submit",e=>{e.preventDefault();const r=g.value,o=C.querySelector(".modal__submit");o.textContent="Saving...",o.disabled=!0,d.editUserAvatar(r).then(e=>m.src=e.avatar).catch(e=>console.error(e)).finally(()=>{o.textContent="Save",o.disabled=!1,z(q),C.reset(),n(o,t)})}),F=t,Array.from(document.querySelectorAll(F.formSelector)).forEach(e=>{e.addEventListener("submit",function(e){e.preventDefault()}),((e,t)=>{const n=Array.from(e.querySelectorAll(t.inputSelector)),s=e.querySelector(t.submitButtonSelector);o(n,s,t),n.forEach(a=>{a.addEventListener("input",function(){((e,t,o)=>{t.validity.valid?r(e,t,o):((e,t,r,o)=>{const n=e.querySelector(`#${t.id}-error`);t.classList.add(o.inputErrorClass),n.textContent=r,n.classList.add(o.errorClass)})(e,t,t.validationMessage,o)})(e,a,t),o(n,s,t)})})})(e,F)}),d.spotsStartUp().then(e=>{const[t,r]=e;l.textContent=r.name,u.textContent=r.about,m.src=r.avatar,t.forEach(e=>M(e))}).catch(e=>{console.error(e)})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,